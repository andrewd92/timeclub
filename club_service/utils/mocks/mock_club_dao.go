// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/andrewd92/timeclub/club_service/infrastructure/dao/club_dao (interfaces: ClubDao)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	club_dao "github.com/andrewd92/timeclub/club_service/infrastructure/dao/club_dao"
	gomock "github.com/golang/mock/gomock"
)

// MockClubDao is a mock of ClubDao interface.
type MockClubDao struct {
	ctrl     *gomock.Controller
	recorder *MockClubDaoMockRecorder
}

// MockClubDaoMockRecorder is the mock recorder for MockClubDao.
type MockClubDaoMockRecorder struct {
	mock *MockClubDao
}

// NewMockClubDao creates a new mock instance.
func NewMockClubDao(ctrl *gomock.Controller) *MockClubDao {
	mock := &MockClubDao{ctrl: ctrl}
	mock.recorder = &MockClubDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClubDao) EXPECT() *MockClubDaoMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockClubDao) GetAll() ([]*club_dao.ClubModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*club_dao.ClubModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockClubDaoMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockClubDao)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockClubDao) GetById(arg0 int64) (*club_dao.ClubModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(*club_dao.ClubModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockClubDaoMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockClubDao)(nil).GetById), arg0)
}
